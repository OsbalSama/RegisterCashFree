/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Views.adminControlls;

import Controllers.dataController;
import Controllers.productController;
import Controllers.salesController;
import Controllers.sessionController;
import Controllers.systemController;
import Controllers.typeContainerController;
import Models.Messages;
import Models.Product;
import Views.commondialogs.updateInCash;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.util.ArrayList;
import java.util.List;
import javax.swing.DefaultListModel;
import javax.swing.JFrame;
import javax.swing.JList;
import javax.swing.JPanel;
import javax.swing.JPopupMenu;
import javax.swing.ListSelectionModel;
import javax.swing.table.DefaultTableModel;
import panelComponents.depMenu;

/**
 *
 * @author ATENEA
 */
public class adminHome extends javax.swing.JFrame {

    /**
     * Creates new form adminHome
     */
    String Class = "adminHome";

    DefaultTableModel modelo;
    List<Product> cart = new ArrayList<>();
    List<Product> browse = new ArrayList<>();
    productController inventory = productController.getInstance();
    sessionController session = sessionController.getInstance();

    //BrowseBar GoogleStyle
    JPopupMenu popBrowser;
    JPanel pnlBrowser;
    JList<String> lisBrowser;

    //AccountSettings Like Android
    JPopupMenu popAccountSettings;
    JPanel pnlAccountSettings;
    JList<String> listAccountSettings;

    public adminHome() {
        initComponents();
    }

    //load User Icon
    public void loadUserIcon() {
        lblLoged.setText("");
        lblLoged.setIcon(systemController.getInstance().getmenuIcon(pnlDeployMenu.getWidth(), pnlDeployMenu.getHeight()));
    }

    //CLASES
    public void loadFrame() {
        txtBrowser.setFocusTraversalKeysEnabled(false);
        tblCart.setFocusTraversalKeysEnabled(false);
        btnGranel.setFocusTraversalKeysEnabled(false);
        btnPayment.setFocusTraversalKeysEnabled(false);
        btnGranel.setFocusTraversalKeysEnabled(false);

        loadUserIcon();
        loadAccountSettings();

        cart = new ArrayList<>();
        this.setTitle("Wellcome to " + systemController.getInstance().getAppName());
        this.setIconImage(systemController.getInstance().getImageIcon().getImage());
        this.setLocationRelativeTo(sessionController.getInstance().getShowedFrame());
        this.addWindowListener(new java.awt.event.WindowAdapter() {
            @Override
            public void windowClosing(java.awt.event.WindowEvent windowEvent) {
                Salir();
            }
        });

        this.setExtendedState(JFrame.MAXIMIZED_BOTH);

        if (!session.getLogedUser().getRole().equals("Administrador")) {
            mainMenuBar.setVisible(false);
        }

        if ((session.getLogedUser().getUsername().equals("root")) && (session.getLogedUser().getRole().equals("Administrador"))) {
            RootTools.setVisible(true);
        } else {
            RootTools.setVisible(false);
        }
        cartTotal();

    }

    public void setData() {
        loadFrame();
        loadTable();        
    }

    public void Salir() {
        sessionController.getInstance().closeApp();
    }

    public void Loggout() {
        sessionController.getInstance().Loggout();
    }

    public void infoProd() {
        systemController.getInstance().infoProd();
    }

    public void getHelp() {
        systemController.getInstance().getContactPage();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        pnlCart = new javax.swing.JPanel();
        jPanel4 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        txtBrowser = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblCart = new javax.swing.JTable();
        txtTotal = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        btnCancel = new javax.swing.JButton();
        btnPayment = new javax.swing.JButton();
        btnGranel = new javax.swing.JButton();
        pnlDeployMenu = new javax.swing.JPanel();
        lblLoged = new javax.swing.JLabel();
        mainMenuBar = new javax.swing.JMenuBar();
        menuFile = new javax.swing.JMenu();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();
        menuLogout = new javax.swing.JMenuItem();
        menuExitApp = new javax.swing.JMenuItem();
        jSeparator2 = new javax.swing.JPopupMenu.Separator();
        menuInfo = new javax.swing.JMenuItem();
        jSeparator3 = new javax.swing.JPopupMenu.Separator();
        menuAccounts = new javax.swing.JMenu();
        menuAllUsers = new javax.swing.JMenuItem();
        menuLogins = new javax.swing.JMenuItem();
        menuAdmin = new javax.swing.JMenu();
        menuCart = new javax.swing.JMenu();
        menuSell = new javax.swing.JMenuItem();
        menuCancel = new javax.swing.JMenuItem();
        menuFind = new javax.swing.JMenuItem();
        menuGranel = new javax.swing.JMenuItem();
        menuNewCorteZ = new javax.swing.JMenuItem();
        menuInventory = new javax.swing.JMenu();
        menuProducts = new javax.swing.JMenuItem();
        menuTypes = new javax.swing.JMenuItem();
        menuContainers = new javax.swing.JMenuItem();
        menuSales = new javax.swing.JMenu();
        menuSalesHistory = new javax.swing.JMenuItem();
        menuHistCorteZ = new javax.swing.JMenuItem();
        menuSettings = new javax.swing.JMenu();
        menuAppConfig = new javax.swing.JMenuItem();
        menuEditTicket = new javax.swing.JMenuItem();
        menuProdInfo = new javax.swing.JMenuItem();
        jMenu1 = new javax.swing.JMenu();
        menuImport = new javax.swing.JMenuItem();
        menuExport = new javax.swing.JMenuItem();
        menuBackupSystem = new javax.swing.JMenuItem();
        menuLayout = new javax.swing.JMenuItem();
        RootTools = new javax.swing.JMenu();
        menuFactoryReset = new javax.swing.JMenuItem();
        resetSystemConfigs = new javax.swing.JMenuItem();
        resetLoggins = new javax.swing.JMenuItem();
        resetInventory = new javax.swing.JMenuItem();
        resetTypes = new javax.swing.JMenuItem();
        resetContainers = new javax.swing.JMenuItem();
        resetSales = new javax.swing.JMenuItem();
        resetSoldProducts = new javax.swing.JMenuItem();
        resetBoxCuts = new javax.swing.JMenuItem();
        menuHelp = new javax.swing.JMenu();
        menuGetHelp = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setMinimumSize(new java.awt.Dimension(720, 480));

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel1.setText("Buscar");

        txtBrowser.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        txtBrowser.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtBrowserActionPerformed(evt);
            }
        });
        txtBrowser.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtBrowserKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtBrowserKeyReleased(evt);
            }
        });

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtBrowser)
                .addContainerGap())
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(txtBrowser, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        tblCart.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        tblCart.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        tblCart.setRowHeight(30);
        tblCart.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                tblCartKeyPressed(evt);
            }
        });
        jScrollPane1.setViewportView(tblCart);

        txtTotal.setFont(new java.awt.Font("Impact", 0, 30)); // NOI18N
        txtTotal.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        txtTotal.setText("$0.00");

        jPanel2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        btnCancel.setFont(new java.awt.Font("Impact", 0, 24)); // NOI18N
        btnCancel.setText("Cancelar");
        btnCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelActionPerformed(evt);
            }
        });

        btnPayment.setFont(new java.awt.Font("Impact", 0, 24)); // NOI18N
        btnPayment.setText("Cobrar");
        btnPayment.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPaymentActionPerformed(evt);
            }
        });

        btnGranel.setFont(new java.awt.Font("Impact", 0, 24)); // NOI18N
        btnGranel.setText("Granel");
        btnGranel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGranelActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnGranel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnPayment)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnCancel)
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnCancel)
                    .addComponent(btnPayment)
                    .addComponent(btnGranel))
                .addContainerGap())
        );

        pnlDeployMenu.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        pnlDeployMenu.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                pnlDeployMenuMouseClicked(evt);
            }
        });

        lblLoged.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        lblLoged.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);

        javax.swing.GroupLayout pnlDeployMenuLayout = new javax.swing.GroupLayout(pnlDeployMenu);
        pnlDeployMenu.setLayout(pnlDeployMenuLayout);
        pnlDeployMenuLayout.setHorizontalGroup(
            pnlDeployMenuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(lblLoged, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        pnlDeployMenuLayout.setVerticalGroup(
            pnlDeployMenuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(lblLoged, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        javax.swing.GroupLayout pnlCartLayout = new javax.swing.GroupLayout(pnlCart);
        pnlCart.setLayout(pnlCartLayout);
        pnlCartLayout.setHorizontalGroup(
            pnlCartLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlCartLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlCartLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 696, Short.MAX_VALUE)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlCartLayout.createSequentialGroup()
                        .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(pnlDeployMenu, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(txtTotal, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        pnlCartLayout.setVerticalGroup(
            pnlCartLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlCartLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlCartLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(pnlDeployMenu, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 248, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtTotal)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        menuFile.setText("Archivo");
        menuFile.add(jSeparator1);

        menuLogout.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_BACK_SPACE, java.awt.event.InputEvent.SHIFT_MASK | java.awt.event.InputEvent.CTRL_MASK));
        menuLogout.setText("Cerrar Sesión");
        menuLogout.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuLogoutActionPerformed(evt);
            }
        });
        menuFile.add(menuLogout);

        menuExitApp.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_DELETE, java.awt.event.InputEvent.SHIFT_MASK | java.awt.event.InputEvent.CTRL_MASK));
        menuExitApp.setText("Salir");
        menuExitApp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuExitAppActionPerformed(evt);
            }
        });
        menuFile.add(menuExitApp);
        menuFile.add(jSeparator2);

        menuInfo.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F8, java.awt.event.InputEvent.SHIFT_MASK | java.awt.event.InputEvent.CTRL_MASK));
        menuInfo.setText("Acerca de ");
        menuInfo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuInfoActionPerformed(evt);
            }
        });
        menuFile.add(menuInfo);
        menuFile.add(jSeparator3);

        mainMenuBar.add(menuFile);

        menuAccounts.setText("Cuentas");

        menuAllUsers.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F6, java.awt.event.InputEvent.SHIFT_MASK | java.awt.event.InputEvent.CTRL_MASK));
        menuAllUsers.setText("Cuentas de Usuario");
        menuAllUsers.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuAllUsersActionPerformed(evt);
            }
        });
        menuAccounts.add(menuAllUsers);

        menuLogins.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F7, java.awt.event.InputEvent.SHIFT_MASK | java.awt.event.InputEvent.CTRL_MASK));
        menuLogins.setText("Actividad Reciente");
        menuLogins.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuLoginsActionPerformed(evt);
            }
        });
        menuAccounts.add(menuLogins);

        mainMenuBar.add(menuAccounts);

        menuAdmin.setText("Administracion");

        menuCart.setText("Carrito de Compras");

        menuSell.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_ENTER, java.awt.event.InputEvent.CTRL_MASK));
        menuSell.setText("Cobrar");
        menuSell.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuSellActionPerformed(evt);
            }
        });
        menuCart.add(menuSell);

        menuCancel.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_SPACE, java.awt.event.InputEvent.SHIFT_MASK | java.awt.event.InputEvent.CTRL_MASK));
        menuCancel.setText("Cancelar");
        menuCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuCancelActionPerformed(evt);
            }
        });
        menuCart.add(menuCancel);

        menuFind.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F1, java.awt.event.InputEvent.SHIFT_MASK | java.awt.event.InputEvent.CTRL_MASK));
        menuFind.setText("Encontrar");
        menuFind.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuFindActionPerformed(evt);
            }
        });
        menuCart.add(menuFind);

        menuGranel.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F2, java.awt.event.InputEvent.SHIFT_MASK | java.awt.event.InputEvent.CTRL_MASK));
        menuGranel.setText("Granel");
        menuGranel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuGranelActionPerformed(evt);
            }
        });
        menuCart.add(menuGranel);

        menuNewCorteZ.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F3, java.awt.event.InputEvent.SHIFT_MASK | java.awt.event.InputEvent.CTRL_MASK));
        menuNewCorteZ.setText("Nuevo Corte Z");
        menuNewCorteZ.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuNewCorteZActionPerformed(evt);
            }
        });
        menuCart.add(menuNewCorteZ);

        menuAdmin.add(menuCart);

        menuInventory.setText("Inventario");

        menuProducts.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_H, java.awt.event.InputEvent.SHIFT_MASK | java.awt.event.InputEvent.CTRL_MASK));
        menuProducts.setText("Mostrar Inventario");
        menuProducts.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuProductsActionPerformed(evt);
            }
        });
        menuInventory.add(menuProducts);

        menuTypes.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_J, java.awt.event.InputEvent.SHIFT_MASK | java.awt.event.InputEvent.CTRL_MASK));
        menuTypes.setText("Mostrar Categorias");
        menuTypes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuTypesActionPerformed(evt);
            }
        });
        menuInventory.add(menuTypes);

        menuContainers.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_K, java.awt.event.InputEvent.SHIFT_MASK | java.awt.event.InputEvent.CTRL_MASK));
        menuContainers.setText("Mostrar Contenedores");
        menuContainers.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuContainersActionPerformed(evt);
            }
        });
        menuInventory.add(menuContainers);

        menuAdmin.add(menuInventory);

        menuSales.setText("Ventas");

        menuSalesHistory.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F4, java.awt.event.InputEvent.SHIFT_MASK | java.awt.event.InputEvent.CTRL_MASK));
        menuSalesHistory.setText("Registro de Ventas");
        menuSalesHistory.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuSalesHistoryActionPerformed(evt);
            }
        });
        menuSales.add(menuSalesHistory);

        menuHistCorteZ.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F5, java.awt.event.InputEvent.SHIFT_MASK | java.awt.event.InputEvent.CTRL_MASK));
        menuHistCorteZ.setText("Registro de Cortes Z");
        menuHistCorteZ.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuHistCorteZActionPerformed(evt);
            }
        });
        menuSales.add(menuHistCorteZ);

        menuAdmin.add(menuSales);

        mainMenuBar.add(menuAdmin);

        menuSettings.setText("Ajustes");

        menuAppConfig.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F10, java.awt.event.InputEvent.SHIFT_MASK | java.awt.event.InputEvent.CTRL_MASK));
        menuAppConfig.setText("Actualizar Datos");
        menuAppConfig.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuAppConfigActionPerformed(evt);
            }
        });
        menuSettings.add(menuAppConfig);

        menuEditTicket.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F11, java.awt.event.InputEvent.SHIFT_MASK | java.awt.event.InputEvent.CTRL_MASK));
        menuEditTicket.setText("Ticket de Compra");
        menuEditTicket.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuEditTicketActionPerformed(evt);
            }
        });
        menuSettings.add(menuEditTicket);

        menuProdInfo.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F12, java.awt.event.InputEvent.SHIFT_MASK | java.awt.event.InputEvent.CTRL_MASK));
        menuProdInfo.setText("Info. de Producto");
        menuProdInfo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuProdInfoActionPerformed(evt);
            }
        });
        menuSettings.add(menuProdInfo);

        jMenu1.setText("Herramientas");

        menuImport.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_PAGE_UP, java.awt.event.InputEvent.SHIFT_MASK | java.awt.event.InputEvent.CTRL_MASK));
        menuImport.setText("Importar Inventario");
        menuImport.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuImportActionPerformed(evt);
            }
        });
        jMenu1.add(menuImport);

        menuExport.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_PAGE_DOWN, java.awt.event.InputEvent.SHIFT_MASK | java.awt.event.InputEvent.CTRL_MASK));
        menuExport.setText("Exportar Inventario");
        menuExport.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuExportActionPerformed(evt);
            }
        });
        jMenu1.add(menuExport);

        menuBackupSystem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_END, java.awt.event.InputEvent.SHIFT_MASK | java.awt.event.InputEvent.CTRL_MASK));
        menuBackupSystem.setText("Respaldo de Sistema");
        menuBackupSystem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuBackupSystemActionPerformed(evt);
            }
        });
        jMenu1.add(menuBackupSystem);

        menuLayout.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_HOME, java.awt.event.InputEvent.SHIFT_MASK | java.awt.event.InputEvent.CTRL_MASK));
        menuLayout.setText("Descargar Plantiilla");
        menuLayout.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuLayoutActionPerformed(evt);
            }
        });
        jMenu1.add(menuLayout);

        RootTools.setText(":Root Tools:");

        menuFactoryReset.setText("Reset All App");
        menuFactoryReset.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuFactoryResetActionPerformed(evt);
            }
        });
        RootTools.add(menuFactoryReset);

        resetSystemConfigs.setText("Reset System Configurations");
        resetSystemConfigs.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resetSystemConfigsActionPerformed(evt);
            }
        });
        RootTools.add(resetSystemConfigs);

        resetLoggins.setText("Reset Login Reg");
        resetLoggins.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resetLogginsActionPerformed(evt);
            }
        });
        RootTools.add(resetLoggins);

        resetInventory.setText("Reset Inventory");
        resetInventory.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resetInventoryActionPerformed(evt);
            }
        });
        RootTools.add(resetInventory);

        resetTypes.setText("Reset Types");
        resetTypes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resetTypesActionPerformed(evt);
            }
        });
        RootTools.add(resetTypes);

        resetContainers.setText("Reset Containers");
        resetContainers.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resetContainersActionPerformed(evt);
            }
        });
        RootTools.add(resetContainers);

        resetSales.setText("Reset Sales");
        resetSales.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resetSalesActionPerformed(evt);
            }
        });
        RootTools.add(resetSales);

        resetSoldProducts.setText("Reset Sold Products");
        resetSoldProducts.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resetSoldProductsActionPerformed(evt);
            }
        });
        RootTools.add(resetSoldProducts);

        resetBoxCuts.setText("Reset Box Cuts");
        resetBoxCuts.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resetBoxCutsActionPerformed(evt);
            }
        });
        RootTools.add(resetBoxCuts);

        jMenu1.add(RootTools);

        menuSettings.add(jMenu1);

        mainMenuBar.add(menuSettings);

        menuHelp.setText("Ayuda");

        menuGetHelp.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F8, java.awt.event.InputEvent.SHIFT_MASK | java.awt.event.InputEvent.CTRL_MASK));
        menuGetHelp.setText("Obtener Ayuda");
        menuGetHelp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuGetHelpActionPerformed(evt);
            }
        });
        menuHelp.add(menuGetHelp);

        mainMenuBar.add(menuHelp);

        setJMenuBar(mainMenuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(pnlCart, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(pnlCart, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void menuLogoutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuLogoutActionPerformed
        Loggout();
    }//GEN-LAST:event_menuLogoutActionPerformed

    private void menuExitAppActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuExitAppActionPerformed
        Salir();
    }//GEN-LAST:event_menuExitAppActionPerformed

    private void menuInfoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuInfoActionPerformed
        infoProd();
    }//GEN-LAST:event_menuInfoActionPerformed

    private void menuAllUsersActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuAllUsersActionPerformed
        allUsers au = new allUsers();
        au.setData();
        au.show();
    }//GEN-LAST:event_menuAllUsersActionPerformed

    private void menuGetHelpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuGetHelpActionPerformed
        getHelp();
    }//GEN-LAST:event_menuGetHelpActionPerformed

    private void menuProductsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuProductsActionPerformed
        showInventory();
    }//GEN-LAST:event_menuProductsActionPerformed

    private void menuLayoutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuLayoutActionPerformed
        downloadLayout();
    }//GEN-LAST:event_menuLayoutActionPerformed

    private void menuExportActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuExportActionPerformed
        ExportDB();

    }//GEN-LAST:event_menuExportActionPerformed

    private void menuImportActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuImportActionPerformed
        ImportDB();
    }//GEN-LAST:event_menuImportActionPerformed

    private void btnPaymentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPaymentActionPerformed
        Cobrar();
    }//GEN-LAST:event_btnPaymentActionPerformed

    private void btnGranelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGranelActionPerformed
        Granel();
    }//GEN-LAST:event_btnGranelActionPerformed

    private void btnCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelActionPerformed
        Cancelar();
    }//GEN-LAST:event_btnCancelActionPerformed

    private void menuAppConfigActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuAppConfigActionPerformed
        updateData();
    }//GEN-LAST:event_menuAppConfigActionPerformed

    private void menuBackupSystemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuBackupSystemActionPerformed
        SystemBackup();
    }//GEN-LAST:event_menuBackupSystemActionPerformed

    private void menuFactoryResetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuFactoryResetActionPerformed
        factoryReset();
    }//GEN-LAST:event_menuFactoryResetActionPerformed

    private void menuLoginsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuLoginsActionPerformed
        allLogins();
    }//GEN-LAST:event_menuLoginsActionPerformed

    private void menuSalesHistoryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuSalesHistoryActionPerformed
        allSales();
    }//GEN-LAST:event_menuSalesHistoryActionPerformed

    private void menuHistCorteZActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuHistCorteZActionPerformed
        allCorteZ();
    }//GEN-LAST:event_menuHistCorteZActionPerformed

    private void menuEditTicketActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuEditTicketActionPerformed
        editTicket();
    }//GEN-LAST:event_menuEditTicketActionPerformed

    private void resetLogginsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_resetLogginsActionPerformed
        resetLoggins();
    }//GEN-LAST:event_resetLogginsActionPerformed

    private void txtBrowserKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtBrowserKeyReleased
        txtBrowser.setBackground(Color.WHITE);
        applyFilters();
    }//GEN-LAST:event_txtBrowserKeyReleased

    private void txtBrowserActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtBrowserActionPerformed
        txtBrowserFuntion();
    }//GEN-LAST:event_txtBrowserActionPerformed

    private void resetInventoryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_resetInventoryActionPerformed
        resetInventory();
    }//GEN-LAST:event_resetInventoryActionPerformed

    private void txtBrowserKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtBrowserKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_TAB) {
            try {
                if (!cart.isEmpty()) {
                    tblCart.requestFocus();
                    tblCart.setRowSelectionInterval(0, 0);
                }
            } catch (Exception e) {
                new Messages().errorMessage(Class, "txtBrowserKeyPressed()", e);
            }
        }

        if (evt.getKeyCode() == KeyEvent.VK_ESCAPE) {
            try {
                txtBrowser.setText("");
            } catch (Exception e) {
                new Messages().errorMessage(Class, "txtBrowserKeyPressed()", e);
            }
        }

        if (evt.getKeyCode() == KeyEvent.VK_DOWN) {
            try {
                if (!browse.isEmpty()) {
                    lisBrowser.requestFocus();
                    lisBrowser.setSelectedIndex(0);
                } else if (browse.isEmpty()) {
                    if (!cart.isEmpty()) {
                        tblCart.requestFocus();
                        tblCart.setRowSelectionInterval(0, 0);
                    }
                }
            } catch (Exception e) {
                new Messages().errorMessage(Class, "txtBrowserKeyPressed()", e);
            }
        }
    }//GEN-LAST:event_txtBrowserKeyPressed

    private void tblCartKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tblCartKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_UP) {
            try {
                if (tblCart.getSelectedRow() == 0) {
                    txtBrowser.requestFocus();
                }
            } catch (Exception e) {
                new Messages().errorMessage(Class, "tblCartKeyPressed()", e);
            }
        }

        if (evt.getKeyCode() == KeyEvent.VK_DELETE) {
            try {
                int selectedRow = tblCart.getSelectedRow();
                if (removeProductToCant(selectedRow)) {
                    txtBrowser.requestFocus();
                } else {
                    tblCart.setRowSelectionInterval(selectedRow, 0);
                }
            } catch (Exception e) {
                new Messages().errorMessage(Class, "tblCartKeyPressed()", e);
            }
        }
    }//GEN-LAST:event_tblCartKeyPressed

    private void menuContainersActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuContainersActionPerformed
        allContainers();
    }//GEN-LAST:event_menuContainersActionPerformed

    private void menuTypesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuTypesActionPerformed
        allTypes();
    }//GEN-LAST:event_menuTypesActionPerformed

    private void resetTypesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_resetTypesActionPerformed
        resetTypes();
    }//GEN-LAST:event_resetTypesActionPerformed

    private void resetContainersActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_resetContainersActionPerformed
        resetContainers();
    }//GEN-LAST:event_resetContainersActionPerformed

    private void pnlDeployMenuMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_pnlDeployMenuMouseClicked
//        if (evt.getClickCount() == 2 && evt.getButton() == MouseEvent.BUTTON1) {
        try {
            enableAccountSettings();
        } catch (Exception e) {
            new Messages().errorMessage(Class, "jPanel3MouseClicked()", e);
        }
//        }

    }//GEN-LAST:event_pnlDeployMenuMouseClicked

    private void resetSalesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_resetSalesActionPerformed
        resetSales();
    }//GEN-LAST:event_resetSalesActionPerformed

    private void resetSoldProductsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_resetSoldProductsActionPerformed
        resetSoldProducts();
    }//GEN-LAST:event_resetSoldProductsActionPerformed

    private void resetBoxCutsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_resetBoxCutsActionPerformed
        resetBoxCuts();
    }//GEN-LAST:event_resetBoxCutsActionPerformed

    private void menuProdInfoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuProdInfoActionPerformed
        productInfo();
    }//GEN-LAST:event_menuProdInfoActionPerformed

    private void menuNewCorteZActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuNewCorteZActionPerformed
        dataController.getInstance().genBoxCut();
    }//GEN-LAST:event_menuNewCorteZActionPerformed

    private void menuGranelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuGranelActionPerformed
        Granel();
    }//GEN-LAST:event_menuGranelActionPerformed

    private void menuFindActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuFindActionPerformed
        findProduct();
    }//GEN-LAST:event_menuFindActionPerformed

    private void menuCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuCancelActionPerformed
        Cancelar();
    }//GEN-LAST:event_menuCancelActionPerformed

    private void menuSellActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuSellActionPerformed
        Cobrar();
    }//GEN-LAST:event_menuSellActionPerformed

    private void resetSystemConfigsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_resetSystemConfigsActionPerformed
        resetSystemConfig();
    }//GEN-LAST:event_resetSystemConfigsActionPerformed

    public void resetSystemConfig() {
        try {
            systemController.getInstance().createSystemConfigs();
            new Messages().closeMessage(":Root Tools:", "System Configurations Reset Sussefully");
        } catch (Exception e) {
            new Messages().errorMessage(Class, "resetSystemConfig()", e);
        }

    }

    public void productInfo() {
        systemController.getInstance().infoProd();
    }

//    public void generalSettings() {
//        systemController.getInstance().mainSettings();
//    }
    public void resetBoxCuts() {
        try {
            salesController.getInstance().resetBoxCuts();
            new Messages().closeMessage(":Root Tools:", "All Box Cuts Reset Sussefully");
        } catch (Exception e) {
            new Messages().errorMessage(Class, "resetBoxCuts()", e);
        }
    }

    public void resetSoldProducts() {
        try {
            salesController.getInstance().resetSoldProducts();
            new Messages().closeMessage(":Root Tools:", "All Sold Products Reset Sussefully");
        } catch (Exception e) {
            new Messages().errorMessage(Class, "resetSoldProducts()", e);
        }
    }

    public void resetSales() {
        try {
            salesController.getInstance().resetSales();
            new Messages().closeMessage(":Root Tools:", "All Sales Reset Sussefully");
        } catch (Exception e) {
            new Messages().errorMessage(Class, "resetSales()", e);
        }
    }

    public void allTypes() {
        allTypes allRegs = new allTypes();
        allRegs.loadFrame();
        allRegs.show();
    }

    public void allContainers() {
        allContainers allRegs = new allContainers();
        allRegs.loadFrame();
        allRegs.show();
    }

    public void resetInventory() {
        try {
            productController.getInstance().resetDataBase();
            new Messages().closeMessage(":Root Tools:", "Inventory Reg Reset Sussefully");
        } catch (Exception e) {
            new Messages().errorMessage(Class, "resetInventory()", e);
        }
    }

    public void resetTypes() {
        try {
            typeContainerController.getInstance().resetTypes();
            new Messages().closeMessage(":Root Tools:", "All Types Reset Sussefully");
        } catch (Exception e) {
            new Messages().errorMessage(Class, "resetTypes()", e);
        }
    }

    public void resetContainers() {
        try {
            typeContainerController.getInstance().resetContainers();
            new Messages().closeMessage(":Root Tools:", "All Containers Reset Sussefully");
        } catch (Exception e) {
            new Messages().errorMessage(Class, "resetContainers()", e);
        }
    }

    public void resetLoggins() {
        try {
            sessionController.getInstance().resetDataBase();
            new Messages().closeMessage(":Root Tools:", "Login Reg Reset Sussefully");
        } catch (Exception e) {
            new Messages().errorMessage(Class, "resetLoggins()", e);
        }
    }

    public boolean removeProductOnCant(Product product) {
        boolean resp = false;
        if (product.haveCant()) {
            product.removeCant();
            resp = true;
        }
        loadCart();
        return resp;
    }

    public boolean removeProductToCant(int Posicion) {
        boolean resp = false;
        if (new Messages().yesNoMessage("Eliminar Producto", "Desea eliminar este producto del carrito?")) {
            cart.remove(Posicion);
            resp = true;
        }
        loadCart();
        return resp;
    }

    public void addProductInCart(Product findedProduct) {
        try {
            if (!findedProduct.noInventory()) {
                if (cart.contains(findedProduct)) {
                    for (int i = 0; i < cart.size(); i++) {
                        Product inCart = cart.get(i);
                        if (inCart.getId().equals(findedProduct.getId())) {
                            if (findedProduct.canBeAdded(inCart.getCant())) {
                                if (inCart.isBulk()) {
                                    setBulkCant ap = new setBulkCant(this, true);
                                    ap.setData(findedProduct);
                                    ap.show();
                                    if (ap.isNext()) {
                                        cart.get(i).setCant(ap.getNewCant());
                                    }
                                } else {
                                    cart.get(i).addCant();
                                }
                            } else {
                                inventory.maxProductInventory(findedProduct);
                            }
                            break;
                        }
                    }

                } else {
                    if (findedProduct.isBulk()) {
                        setBulkCant ap = new setBulkCant(this, true);
                        ap.setData(findedProduct);
                        ap.show();
                        if (ap.isNext()) {
                            findedProduct.setCant(ap.getNewCant());
                            cart.add(findedProduct);
                        }
                    } else {
                        findedProduct.setCant(1);
                        cart.add(findedProduct);
                    }
                }
            } else {
                inventory.noProductInventory(findedProduct);
            }
        } catch (Exception e) {
            new Messages().errorMessage(Class, "addProductInCart()", e);
        }
        loadCart();
        txtBrowser.setText("");
        txtBrowser.requestFocus();
    }

    public void loadTable() {
        modelo = new DefaultTableModel() {
            @Override
            public boolean isCellEditable(int filas, int columnas) {
                if (columnas < 0) {
                    return true;
                } else {
                    return false;
                }
            }
        };
        modelo.addColumn("Codigo");
        modelo.addColumn("Descripción");
        modelo.addColumn("Marca");
        modelo.addColumn("Precio");
        modelo.addColumn("Cant");
        modelo.addColumn("Total");
        tblCart.setModel(modelo);

        tblCart.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
    }

    public void loadCart() {
        modelo.setRowCount(0);
        try {
            for (int i = 0; i < cart.size(); i++) {
                Product temp = cart.get(i);
                String[] newRow = new String[6];
                newRow[0] = temp.getId();
                newRow[1] = temp.getDescription();
                newRow[2] = temp.getBrand();
                newRow[3] = dataController.getInstance().getMoneyFormat(temp.getValue());
                if (temp.isBulk()) {
                    newRow[4] = dataController.getInstance().getKgFormat(temp.getCant());
                } else {
                    newRow[4] = dataController.getInstance().getPzFormat(temp.getCant());
                }
                newRow[5] = dataController.getInstance().getMoneyFormat(temp.getValue() * temp.getCant());
                modelo.addRow(newRow);
            }
            cartTotal();
        } catch (Exception e) {
            new Messages().errorMessage(Class, "loadCart()", e);
        }
    }

    public void cartTotal() {
        try {
            txtTotal.setText(dataController.getInstance().getMoneyFormat(dataController.getInstance().getCartTotal(cart)));
        } catch (Exception e) {
            new Messages().errorMessage(Class, "cartTotal()", e);
        }
    }

    public double calcTotal(double Price, double Canr) {
        return (Price * Canr);
    }

    public void applyFilters() {
        String Index = txtBrowser.getText().trim();
        if (Index.length() > 0) {
            browse = inventory.getDBProdbyIndex(Index);
            if (!browse.isEmpty()) {
                enableBrowserList();
            } else {
                browse = new ArrayList<>();
                disableBrowserList();
            }
        } else {
            browse = new ArrayList<>();
            disableBrowserList();
        }
    }

    public void txtBrowserFuntion() {
        if (txtBrowser.getText().trim().length() > 0) {
            if (!browse.isEmpty()) {
                Product finded = browse.get(0);
                addProductInCart(finded);
            } else {
                if (new Messages().yesNoMessage("No Encontrado", "El producto que buscas no existe... Deseas agregarlo?")) {
                    newProd();
                }
                loadCart();
                txtBrowser.setText("");
                txtBrowser.requestFocus();
            }

        }
    }

    //BrowseBar GoogleStyle
    public void loadBrowseBar() {
        lisBrowser.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseClicked(MouseEvent evt) {
                if (evt.getClickCount() == 2) {
                    try {
                        Product finded = browse.get(lisBrowser.getSelectedIndex());
                        addProductInCart(finded);
                    } catch (Exception e) {
                        new Messages().errorMessage(Class, "loadBrowser()", e);
                    }
                    txtBrowser.setText("");
                    txtBrowser.requestFocus();
                }
            }
        });

        lisBrowser.addKeyListener(new KeyAdapter() {
            @Override
            public void keyPressed(KeyEvent evt) {
                if (evt.getKeyCode() == KeyEvent.VK_UP) {
                    try {
                        if (lisBrowser.getSelectedIndex() == 0) {
                            txtBrowser.requestFocus();
                        }
                    } catch (Exception e) {
                        new Messages().errorMessage(Class, "loadBrowser()", e);
                    }
                }

                if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
                    try {
                        Product finded = browse.get(lisBrowser.getSelectedIndex());
                        addProductInCart(finded);
                        txtBrowser.setText("");
                        txtBrowser.requestFocus();
                    } catch (Exception e) {
                        new Messages().errorMessage(Class, "loadBrowser()", e);
                    }
                    txtBrowser.setText("");
                    txtBrowser.requestFocus();
                }
                if (evt.getKeyCode() == KeyEvent.VK_ESCAPE) {
                    try {
                        txtBrowser.setText("");
                        txtBrowser.requestFocus();
                    } catch (Exception e) {
                        new Messages().errorMessage(Class, "loadBrowser()", e);
                    }

                }
            }
        });
    }

    public void enableBrowserList() {
        try {
            popBrowser = new JPopupMenu();
            pnlBrowser = new JPanel();
            lisBrowser = new JList<>();

            popBrowser.setFocusTraversalKeysEnabled(false);
            pnlBrowser.setFocusTraversalKeysEnabled(false);
            lisBrowser.setFocusTraversalKeysEnabled(false);

            pnlBrowser.setBackground(Color.WHITE);

            DefaultListModel<String> model = new DefaultListModel<>();
            for (int i = 0; i < browse.size(); i++) {
                String bulk = "";
                if (browse.get(i).isBulk()) {
                    bulk = "Granel";
                } else {
                    bulk = "Unit";
                }
                String Item = "BARCODE: [" + browse.get(i).getId() + "] DESCRIPTION: [" + browse.get(i).getDescription() + ", " + browse.get(i).getBrand() + "] INVENTORY: [" + browse.get(i).getInventory() + "] Sale As [" + bulk + "]";
                model.addElement(Item);
            }

            loadBrowseBar();

            lisBrowser.setModel(model);
            pnlBrowser.add(lisBrowser);
            popBrowser.add(pnlBrowser);

            Dimension maximunSize = new Dimension(txtBrowser.getWidth(), (this.getHeight() / 4));
            popBrowser.setMaximumSize(maximunSize);
            lisBrowser.setMaximumSize(maximunSize);

            Dimension preferenSize = new Dimension(txtBrowser.getWidth(), ((this.getHeight() / 4)));
            lisBrowser.setPreferredSize(preferenSize);

            popBrowser.show(txtBrowser, 0, txtBrowser.getHeight());
            txtBrowser.requestFocus();

        } catch (Exception e) {
            new Messages().errorMessage(Class, "enableBrowserList()", e);
        }
    }

    public void disableBrowserList() {
        if ((popBrowser != null)) {
            popBrowser.setVisible(false);
        }
    }

    public void loadAccountSettings() {
        popAccountSettings = new JPopupMenu();
        pnlAccountSettings = new JPanel();
        listAccountSettings = new JList<>();

        popAccountSettings.setFocusTraversalKeysEnabled(false);
        pnlAccountSettings.setFocusTraversalKeysEnabled(false);
        listAccountSettings.setFocusTraversalKeysEnabled(false);

        popAccountSettings.setBackground(Color.WHITE);
        depMenu deployable = new depMenu();
        deployable.setData();
        popAccountSettings.add(deployable);
    }

    public void enableAccountSettings() {
        popAccountSettings.show(pnlDeployMenu, (pnlDeployMenu.getWidth() * -1), pnlDeployMenu.getHeight());
    }

    public void editTicket() {
        systemController.getInstance().editTicketSettings();
    }

    public void allCorteZ() {
        allBoxCuts abc = new allBoxCuts();
        abc.loadFrame();
        abc.show();
    }

    public void allSales() {
        allSales as = new allSales();
        as.loadFrame();
        as.show();
    }

    public void allLogins() {
        allLogins al = new allLogins();
        al.loadFrame();
        al.show();
    }

    public void findProduct() {
        txtBrowser.setBackground(Color.yellow);
        txtBrowser.requestFocus();
    }

    public void factoryReset() {
        systemController.getInstance().enableResetMode();
    }

    public void SystemBackup() {
        if (new Messages().continueCancelMessage("Respaldo de Sistema", "Realizar Backup del Sistema?")) {
            systemController.getInstance().SystemBackup();
        }
    }

    public void updateData() {
        systemController.getInstance().updateStoreData();
    }

    public void Cobrar() {
        try {
            if (!cart.isEmpty()) {
                if (dataController.getInstance().saveSale(cart)) {
                    new Messages().closeMessage("Realizar Compra", "Operacion Terminada Correctamente");
                    cart = new ArrayList<>();
                    loadCart();
                }
            }
        } catch (Exception e) {
            new Messages().errorMessage(Class, "Cobrar()", e);
        }
    }

    public void Granel() {
        try {
            if (!cart.isEmpty()) {
                setBulkCant ap = new setBulkCant(null, true);
                ap.setData();
                ap.show();
                if (ap.isNext()) {
                    Product temp = ap.getProd();
                    if (cart.contains(temp)) {
                        for (int i = 0; i < cart.size(); i++) {
                            if (cart.get(i).getId().equals(temp.getId())) {
                                cart.get(i).setCant(ap.getNewCant());
                                break;
                            }
                        }
                    } else {
                        cart.add(ap.getProd());
                    }
                }

            } else {
                setBulkCant ap = new setBulkCant(this, true);
                ap.setData();
                ap.show();
                if (ap.isNext()) {
                    Product temp = ap.getProd();
                    temp.setCant(ap.getNewCant());
                    cart.add(ap.getProd());
                }
            }
        } catch (Exception e) {
            new Messages().errorMessage(Class, "Granel()", e);
        }
        loadCart();
    }

    public void Cancelar() {
        if (!cart.isEmpty()) {
            if (new Messages().confirmMessage("Cancelar Operacion", "¿Está seguro que desea Cancelar la Compra?")) {
                cart = new ArrayList<>();
                loadCart();
            }
        }
    }

    public void ImportDB() {
        dataController.getInstance().importDatabase();
    }

    public void ExportDB() {
        dataController.getInstance().exportDatabase();
    }

    public void downloadLayout() {
        if (dataController.getInstance().downloadLayout()) {
            new Messages().closeMessage("Descargar Plantilla", "Plantilla descargada correctamente");
        }
    }

    public void newProd() {
        newProd np = new newProd(this, true);
        np.newProduct();
        np.show();
    }

    public void showInventory() {
        allInventory gestProds = new allInventory();
        gestProds.loadFrame();
        gestProds.show();
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(adminHome.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(adminHome.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(adminHome.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(adminHome.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new adminHome().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenu RootTools;
    private javax.swing.JButton btnCancel;
    private javax.swing.JButton btnGranel;
    private javax.swing.JButton btnPayment;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JPopupMenu.Separator jSeparator1;
    private javax.swing.JPopupMenu.Separator jSeparator2;
    private javax.swing.JPopupMenu.Separator jSeparator3;
    private javax.swing.JLabel lblLoged;
    private javax.swing.JMenuBar mainMenuBar;
    private javax.swing.JMenu menuAccounts;
    private javax.swing.JMenu menuAdmin;
    private javax.swing.JMenuItem menuAllUsers;
    private javax.swing.JMenuItem menuAppConfig;
    private javax.swing.JMenuItem menuBackupSystem;
    private javax.swing.JMenuItem menuCancel;
    private javax.swing.JMenu menuCart;
    private javax.swing.JMenuItem menuContainers;
    private javax.swing.JMenuItem menuEditTicket;
    private javax.swing.JMenuItem menuExitApp;
    private javax.swing.JMenuItem menuExport;
    private javax.swing.JMenuItem menuFactoryReset;
    private javax.swing.JMenu menuFile;
    private javax.swing.JMenuItem menuFind;
    private javax.swing.JMenuItem menuGetHelp;
    private javax.swing.JMenuItem menuGranel;
    private javax.swing.JMenu menuHelp;
    private javax.swing.JMenuItem menuHistCorteZ;
    private javax.swing.JMenuItem menuImport;
    private javax.swing.JMenuItem menuInfo;
    private javax.swing.JMenu menuInventory;
    private javax.swing.JMenuItem menuLayout;
    private javax.swing.JMenuItem menuLogins;
    private javax.swing.JMenuItem menuLogout;
    private javax.swing.JMenuItem menuNewCorteZ;
    private javax.swing.JMenuItem menuProdInfo;
    private javax.swing.JMenuItem menuProducts;
    private javax.swing.JMenu menuSales;
    private javax.swing.JMenuItem menuSalesHistory;
    private javax.swing.JMenuItem menuSell;
    private javax.swing.JMenu menuSettings;
    private javax.swing.JMenuItem menuTypes;
    private javax.swing.JPanel pnlCart;
    private javax.swing.JPanel pnlDeployMenu;
    private javax.swing.JMenuItem resetBoxCuts;
    private javax.swing.JMenuItem resetContainers;
    private javax.swing.JMenuItem resetInventory;
    private javax.swing.JMenuItem resetLoggins;
    private javax.swing.JMenuItem resetSales;
    private javax.swing.JMenuItem resetSoldProducts;
    private javax.swing.JMenuItem resetSystemConfigs;
    private javax.swing.JMenuItem resetTypes;
    private javax.swing.JTable tblCart;
    private javax.swing.JTextField txtBrowser;
    private javax.swing.JLabel txtTotal;
    // End of variables declaration//GEN-END:variables
}
